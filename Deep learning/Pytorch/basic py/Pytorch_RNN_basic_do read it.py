import torch
import torch.nn as nn

h1 = None
# rnn : input_size=5, hidden_size=5, no of hidden layer=2,batch_first=True)
rnn = nn.RNN(input_size=10, hidden_size=20, num_layers=2, batch_first=True)

# Input: (batch, seq_len, input_size)
input = torch.randn(3, 1, 10)
# ** h_n ** (num_layers * num_directions, batch, hidden_size)
h0 = torch.randn(2, 3, 20)
output, hn = rnn(input, h0)
# hn: **h_n** (num_layers * num_directions, batch, hidden_size): tensor
# output, hn = rnn(input, h1)#another method
print('input.shape=', input.shape)
print('hidden Shape=', hn.shape)
print('output_shaoe=', output.shape, '\n')

# rnn = nn.LSTM(10, 20, 2)
# input = torch.randn(4, 3, 10)
# h0 = torch.randn(2, 3, 20)
# c0 = torch.randn(2, 3, 20)
# hn=None
# cn=None
# output, (hn, cn) = rnn(input, (h0, c0))
#
# print('input.shape=', input.shape)
# print('h0 Shape=',h0.shape)
# print('c0 Shape=',c0.shape)
# print('output_shaoe=',output.shape)

# Input: (batch, seq_len, input_size)
rnn = nn.LSTM(input_size=784, hidden_size=100, num_layers=2, batch_first=True)
input = torch.randn(1, 64, 784)
h0 = torch.randn(2, 1, 100)  # rememeber this is not the value of weights
# rather is the first input to first hidden layer since after first time step the value
# will be generated by hidden layer so first value will be random intialse from us whose dimesion
# is same as output of first hidden layer or we can just define None and input from first hidden to hidden
# will become 0

c0 = torch.randn(2, 1, 100)
h0 = None
c0 = None
output, (hn, cn) = rnn(input, (h0, c0))
# output, (hn, cn) = rnn(input,None)

print('input.shape=', input.shape)
print('h0 Shape=', hn.shape)
print('c0 Shape=', cn.shape)
print('output_shaoe=', output.shape)
