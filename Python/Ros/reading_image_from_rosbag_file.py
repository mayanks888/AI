#!/usr/bin/pythonimport sysprint(sys.path)'/home/mayank_sati/rospy3_kinetic/venv3.5_ros/lib/python3.5/site-packages/cv2/cv2.cpython-35m-x86_64-linux-gnu.so'# sys.path.insert(1,'/home/mayank_sati/rospy3_kinetic/venv3.5_ros/lib/python3.5/site-packages/cv2/cv2.cpython-35m-x86_64-linux-gnu.so')import rosbagimport cv2import cv_bridgeflag = Trueimport osprint(1)# mytopic = "/apollo/localization/pose"mytopic = "/apollo/sensor/camera/traffic/image_short"# mytopic = "/apollo/sensor/camera/traffic/image_long"# mytopic = "/apollo/sensor/camera/traffic/image_side"# bag_name_in='/home/mayank_sati/Documents/datsets/Rosbag_files/78_gb_us_demo_route.bag'# bag_name_in = '/home/mayank_sati/Documents/datsets/Rosbag_files/traffic_light11.bag'# bag_name_in = '/media/mayank_sati/DATA/datasets/gwm_specific/short_range_images/2018-11-24-09-44-06/2018-11-24-09-44-08_0.bag'# bag_name_in='/media/mayank_sati/DATA/datasets/one_shot_datasets/Farmington/bags/2019-09-27-14-39-41/2019-09-27-14-39-43_new_bag.bag'# bag_name_in='/media/mayank_sati/DATA/datasets/one_shot_datasets/Farmington/bags/2019-09-27-14-36-06/2019-09-27-14-36-08.bag'# bag_name_in='/media/mayank_sati/DATA/datasets/one_shot_datasets/Farmington/bags/2019-09-27-14-39-41/2019-09-27-14-39-43_new_bag.bag'# bag_name_in='/media/mayank_sati/DATA/datasets/gwm_specific/short_range_images/2018-11-24-09-44-06/2018-11-24-09-44-08_0_NO_TL.bag'bag_name_in = '/home/mayank_sati/Desktop/new_bag.bag'base_path = '/home/mayank_sati/Desktop/new_bag'# yaml_list = yaml.load(rosbag.Bag(bag_name_in, 'r')._get_yaml_info())# with open('rosbag_annotation.yaml', 'a') as outfile:#     yaml.dump(yaml_list, outfile)counter = 1for index, (topic, msg, t) in enumerate(rosbag.Bag(bag_name_in).read_messages()):    if topic == mytopic:        # +++++++++++++++++++++++++++++++++++++++++++++++++++        # image_path = image_file_path + str(counter) + '.jpg'        if flag == True:            print(t)            ##############################################333            # msg = readMessages(bagFix)            # tsFix = timeseries(bagFix, 'Latitude', 'Longitude')            # cur_pos = msg.pose.position            # print(cur_pos.x)            # dtype, n_channels = self.encoding_to_dtype_with_channels(msg.encoding)            # msg.data=np.array(msg.d/ata)            # im = np.ndarray(shape=(msg.height, msg.width, 3), buffer=msg.data)            ###################################################            # msg.encoding = 'yuv422'            # msg.encoding = 'bgr8'            bridge = cv_bridge.CvBridge()            # cv_img = bridge.imgmsg_to_cv2(msg, 'yuv422')            # cv_img = bridge.imgmsg_to_cv2(msg, "bgr8")            # cv_img = bridge.imgmsg_to_cv2(msg, "")            cv_img = bridge.imgmsg_to_cv2(msg, 'passthrough')            print(cv_img.shape)            # cv_image = bridge.imgmsg_to_cv2(msg, desired_encoding="passthrough")            # cv_img = cv2.cvtColor(cv_img, cv2.COLOR_YUV2BGR_YUY2)            img_data = cv2.cvtColor(cv_img, cv2.COLOR_BAYER_BG2BGR, 3)            time = msg.header.stamp            if not os.path.exists(base_path):                print("base_path folder not present. Creating New folder...")                os.makedirs(base_path)                loop = 1            # base_path = "./xishui_new"            save_path = (base_path + "/" + str(time) + '.jpg')            cv2.imwrite(save_path, img_data, [cv2.IMWRITE_JPEG_QUALITY, 100])            # cv2.imwrite(save_path, img_data,[cv2.IMWRITE_JPEG2000_COMPRESSION_X1000 ,100] )